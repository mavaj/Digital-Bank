/*     */ package com.bright.framework.database.bean;
/*     */ 
/*     */ import java.io.InputStream;
/*     */ import java.io.Reader;
/*     */ import java.math.BigDecimal;
/*     */ import java.net.URL;
/*     */ import java.sql.Array;
/*     */ import java.sql.Blob;
/*     */ import java.sql.Clob;
/*     */ import java.sql.Connection;
/*     */ import java.sql.Date;
/*     */ import java.sql.NClob;
/*     */ import java.sql.ParameterMetaData;
/*     */ import java.sql.PreparedStatement;
/*     */ import java.sql.Ref;
/*     */ import java.sql.ResultSet;
/*     */ import java.sql.ResultSetMetaData;
/*     */ import java.sql.RowId;
/*     */ import java.sql.SQLException;
/*     */ import java.sql.SQLWarning;
/*     */ import java.sql.SQLXML;
/*     */ import java.sql.Time;
/*     */ import java.sql.Timestamp;
/*     */ import java.util.Calendar;
/*     */// import oracle.jdbc.driver.OraclePreparedStatement;
       // import java.sql.PreparedStatement;
import oracle.jdbc.OraclePreparedStatement;
/*     */ 
/*     */ public class AdaptedStatement
/*     */   implements PreparedStatement
/*     */ {
/*  54 */   private PreparedStatement m_statement = null;
/*  55 */   private boolean m_bUseNationalCharacterTypes = false;
/*     */ 
/*     */   public AdaptedStatement(PreparedStatement a_delegate, boolean a_bUseNationalCharacterTypes)
/*     */   {
/*  59 */     this.m_statement = a_delegate;
/*  60 */     this.m_bUseNationalCharacterTypes = a_bUseNationalCharacterTypes;
/*     */   }
/*     */ 
/*     */   public void addBatch() throws SQLException
/*     */   {
/*  65 */     this.m_statement.addBatch();
/*     */   }
/*     */ 
/*     */   public void addBatch(String sql) throws SQLException
/*     */   {
/*  70 */     this.m_statement.addBatch(sql);
/*     */   }
/*     */ 
/*     */   public void cancel() throws SQLException
/*     */   {
/*  75 */     this.m_statement.cancel();
/*     */   }
/*     */ 
/*     */   public void clearBatch() throws SQLException
/*     */   {
/*  80 */     this.m_statement.clearBatch();
/*     */   }
/*     */ 
/*     */   public void clearParameters() throws SQLException
/*     */   {
/*  85 */     this.m_statement.clearParameters();
/*     */   }
/*     */ 
/*     */   public void clearWarnings() throws SQLException
/*     */   {
/*  90 */     this.m_statement.clearWarnings();
/*     */   }
/*     */ 
/*     */   public void close() throws SQLException
/*     */   {
/*  95 */     this.m_statement.close();
/*     */   }
/*     */ 
/*     */   public boolean execute() throws SQLException
/*     */   {
/* 100 */     return this.m_statement.execute();
/*     */   }
/*     */ 
/*     */   public boolean execute(String sql, int autoGeneratedKeys) throws SQLException
/*     */   {
/* 105 */     return this.m_statement.execute(sql, autoGeneratedKeys);
/*     */   }
/*     */ 
/*     */   public boolean execute(String sql, int[] columnIndexes) throws SQLException
/*     */   {
/* 110 */     return this.m_statement.execute(sql, columnIndexes);
/*     */   }
/*     */ 
/*     */   public boolean execute(String sql, String[] columnNames) throws SQLException
/*     */   {
/* 115 */     return this.m_statement.execute(sql, columnNames);
/*     */   }
/*     */ 
/*     */   public boolean execute(String sql) throws SQLException
/*     */   {
/* 120 */     return this.m_statement.execute(sql);
/*     */   }
/*     */ 
/*     */   public int[] executeBatch() throws SQLException
/*     */   {
/* 125 */     return this.m_statement.executeBatch();
/*     */   }
/*     */ 
/*     */   public ResultSet executeQuery() throws SQLException
/*     */   {
/* 130 */     return this.m_statement.executeQuery();
/*     */   }
/*     */ 
/*     */   public ResultSet executeQuery(String sql) throws SQLException
/*     */   {
/* 135 */     return this.m_statement.executeQuery(sql);
/*     */   }
/*     */ 
/*     */   public int executeUpdate() throws SQLException
/*     */   {
/* 140 */     return this.m_statement.executeUpdate();
/*     */   }
/*     */ 
/*     */   public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException
/*     */   {
/* 145 */     return this.m_statement.executeUpdate(sql, autoGeneratedKeys);
/*     */   }
/*     */ 
/*     */   public int executeUpdate(String sql, int[] columnIndexes) throws SQLException
/*     */   {
/* 150 */     return this.m_statement.executeUpdate(sql, columnIndexes);
/*     */   }
/*     */ 
/*     */   public int executeUpdate(String sql, String[] columnNames) throws SQLException
/*     */   {
/* 155 */     return this.m_statement.executeUpdate(sql, columnNames);
/*     */   }
/*     */ 
/*     */   public int executeUpdate(String sql) throws SQLException
/*     */   {
/* 160 */     return this.m_statement.executeUpdate(sql);
/*     */   }
/*     */ 
/*     */   public Connection getConnection() throws SQLException
/*     */   {
/* 165 */     return this.m_statement.getConnection();
/*     */   }
/*     */ 
/*     */   public int getFetchDirection() throws SQLException
/*     */   {
/* 170 */     return this.m_statement.getFetchDirection();
/*     */   }
/*     */ 
/*     */   public int getFetchSize() throws SQLException
/*     */   {
/* 175 */     return this.m_statement.getFetchSize();
/*     */   }
/*     */ 
/*     */   public ResultSet getGeneratedKeys() throws SQLException
/*     */   {
/* 180 */     return this.m_statement.getGeneratedKeys();
/*     */   }
/*     */ 
/*     */   public int getMaxFieldSize() throws SQLException
/*     */   {
/* 185 */     return this.m_statement.getMaxFieldSize();
/*     */   }
/*     */ 
/*     */   public int getMaxRows() throws SQLException
/*     */   {
/* 190 */     return this.m_statement.getMaxRows();
/*     */   }
/*     */ 
/*     */   public ResultSetMetaData getMetaData() throws SQLException
/*     */   {
/* 195 */     return this.m_statement.getMetaData();
/*     */   }
/*     */ 
/*     */   public boolean getMoreResults() throws SQLException
/*     */   {
/* 200 */     return this.m_statement.getMoreResults();
/*     */   }
/*     */ 
/*     */   public boolean getMoreResults(int current) throws SQLException
/*     */   {
/* 205 */     return this.m_statement.getMoreResults(current);
/*     */   }
/*     */ 
/*     */   public ParameterMetaData getParameterMetaData() throws SQLException
/*     */   {
/* 210 */     return this.m_statement.getParameterMetaData();
/*     */   }
/*     */ 
/*     */   public int getQueryTimeout() throws SQLException
/*     */   {
/* 215 */     return this.m_statement.getQueryTimeout();
/*     */   }
/*     */ 
/*     */   public ResultSet getResultSet() throws SQLException
/*     */   {
/* 220 */     return this.m_statement.getResultSet();
/*     */   }
/*     */ 
/*     */   public int getResultSetConcurrency() throws SQLException
/*     */   {
/* 225 */     return this.m_statement.getResultSetConcurrency();
/*     */   }
/*     */ 
/*     */   public int getResultSetHoldability() throws SQLException
/*     */   {
/* 230 */     return this.m_statement.getResultSetHoldability();
/*     */   }
/*     */ 
/*     */   public int getResultSetType() throws SQLException
/*     */   {
/* 235 */     return this.m_statement.getResultSetType();
/*     */   }
/*     */ 
/*     */   public int getUpdateCount() throws SQLException
/*     */   {
/* 240 */     return this.m_statement.getUpdateCount();
/*     */   }
/*     */ 
/*     */   public SQLWarning getWarnings() throws SQLException
/*     */   {
/* 245 */     return this.m_statement.getWarnings();
/*     */   }
/*     */ 
/*     */   public void setArray(int i, Array x) throws SQLException
/*     */   {
/* 250 */     this.m_statement.setArray(i, x);
/*     */   }
/*     */ 
/*     */   public void setAsciiStream(int parameterIndex, InputStream x, int length) throws SQLException
/*     */   {
/* 255 */     this.m_statement.setAsciiStream(parameterIndex, x, length);
/*     */   }
/*     */ 
/*     */   public void setBigDecimal(int parameterIndex, BigDecimal x) throws SQLException
/*     */   {
/* 260 */     this.m_statement.setBigDecimal(parameterIndex, x);
/*     */   }
/*     */ 
/*     */   public void setBinaryStream(int parameterIndex, InputStream x, int length) throws SQLException
/*     */   {
/* 265 */     this.m_statement.setBinaryStream(parameterIndex, x, length);
/*     */   }
/*     */ 
/*     */   public void setBlob(int i, Blob x) throws SQLException
/*     */   {
/* 270 */     this.m_statement.setBlob(i, x);
/*     */   }
/*     */ 
/*     */   public void setBoolean(int parameterIndex, boolean x) throws SQLException
/*     */   {
/* 275 */     this.m_statement.setBoolean(parameterIndex, x);
/*     */   }
/*     */ 
/*     */   public void setByte(int parameterIndex, byte x) throws SQLException
/*     */   {
/* 280 */     this.m_statement.setByte(parameterIndex, x);
/*     */   }
/*     */ 
/*     */   public void setBytes(int parameterIndex, byte[] x) throws SQLException
/*     */   {
/* 285 */     this.m_statement.setBytes(parameterIndex, x);
/*     */   }
/*     */ 
/*     */   public void setCharacterStream(int parameterIndex, Reader reader, int length) throws SQLException
/*     */   {
/* 290 */     this.m_statement.setCharacterStream(parameterIndex, reader, length);
/*     */   }
/*     */ 
/*     */   public void setClob(int i, Clob x) throws SQLException
/*     */   {
/* 295 */     this.m_statement.setClob(i, x);
/*     */   }
/*     */ 
/*     */   public void setCursorName(String name) throws SQLException
/*     */   {
/* 300 */     this.m_statement.setCursorName(name);
/*     */   }
/*     */ 
/*     */   public void setDate(int parameterIndex, Date x, Calendar cal) throws SQLException
/*     */   {
/* 305 */     this.m_statement.setDate(parameterIndex, x, cal);
/*     */   }
/*     */ 
/*     */   public void setDate(int parameterIndex, Date x) throws SQLException
/*     */   {
/* 310 */     this.m_statement.setDate(parameterIndex, x);
/*     */   }
/*     */ 
/*     */   public void setDouble(int parameterIndex, double x) throws SQLException
/*     */   {
/* 315 */     this.m_statement.setDouble(parameterIndex, x);
/*     */   }
/*     */ 
/*     */   public void setEscapeProcessing(boolean enable) throws SQLException
/*     */   {
/* 320 */     this.m_statement.setEscapeProcessing(enable);
/*     */   }
/*     */ 
/*     */   public void setFetchDirection(int direction) throws SQLException
/*     */   {
/* 325 */     this.m_statement.setFetchDirection(direction);
/*     */   }
/*     */ 
/*     */   public void setFetchSize(int rows) throws SQLException
/*     */   {
/* 330 */     this.m_statement.setFetchSize(rows);
/*     */   }
/*     */ 
/*     */   public void setFloat(int parameterIndex, float x) throws SQLException
/*     */   {
/* 335 */     this.m_statement.setFloat(parameterIndex, x);
/*     */   }
/*     */ 
/*     */   public void setInt(int parameterIndex, int x) throws SQLException
/*     */   {
/* 340 */     this.m_statement.setInt(parameterIndex, x);
/*     */   }
/*     */ 
/*     */   public void setLong(int parameterIndex, long x) throws SQLException
/*     */   {
/* 345 */     this.m_statement.setLong(parameterIndex, x);
/*     */   }
/*     */ 
/*     */   public void setMaxFieldSize(int max) throws SQLException
/*     */   {
/* 350 */     this.m_statement.setMaxFieldSize(max);
/*     */   }
/*     */ 
/*     */   public void setMaxRows(int max) throws SQLException
/*     */   {
/* 355 */     this.m_statement.setMaxRows(max);
/*     */   }
/*     */ 
/*     */   public void setNull(int paramIndex, int sqlType, String typeName) throws SQLException
/*     */   {
/* 360 */     this.m_statement.setNull(paramIndex, sqlType, typeName);
/*     */   }
/*     */ 
/*     */   public void setNull(int parameterIndex, int sqlType) throws SQLException
/*     */   {
/* 365 */     this.m_statement.setNull(parameterIndex, sqlType);
/*     */   }
/*     */ 
/*     */   public void setObject(int parameterIndex, Object x, int targetSqlType, int scale) throws SQLException
/*     */   {
/* 370 */     this.m_statement.setObject(parameterIndex, x, targetSqlType, scale);
/*     */   }
/*     */ 
/*     */   public void setObject(int parameterIndex, Object x, int targetSqlType) throws SQLException
/*     */   {
/* 375 */     this.m_statement.setObject(parameterIndex, x, targetSqlType);
/*     */   }
/*     */ 
/*     */   public void setObject(int parameterIndex, Object x) throws SQLException
/*     */   {
/* 380 */     this.m_statement.setObject(parameterIndex, x);
/*     */   }
/*     */ 
/*     */   public void setQueryTimeout(int seconds) throws SQLException
/*     */   {
/* 385 */     this.m_statement.setQueryTimeout(seconds);
/*     */   }
/*     */ 
/*     */   public void setRef(int i, Ref x) throws SQLException
/*     */   {
/* 390 */     this.m_statement.setRef(i, x);
/*     */   }
/*     */ 
/*     */   public void setShort(int parameterIndex, short x) throws SQLException
/*     */   {
/* 395 */     this.m_statement.setShort(parameterIndex, x);
/*     */   }
/*     */ 
/*     */   public void setString(int a_iParameterIndex, String a_sStringVal)
/*     */     throws SQLException
/*     */   {
/* 406 */     if (((this.m_statement instanceof OraclePreparedStatement)) && (this.m_bUseNationalCharacterTypes))
/*     */     {
/* 408 */       ((OraclePreparedStatement)this.m_statement).setFormOfUse(a_iParameterIndex,(short) 2);
/*     */     }
/* 410 */     this.m_statement.setString(a_iParameterIndex, a_sStringVal);
/*     */   }
/*     */ 
/*     */   public void setTime(int parameterIndex, Time x, Calendar cal) throws SQLException
/*     */   {
/* 415 */     this.m_statement.setTime(parameterIndex, x, cal);
/*     */   }
/*     */ 
/*     */   public void setTime(int parameterIndex, Time x) throws SQLException
/*     */   {
/* 420 */     this.m_statement.setTime(parameterIndex, x);
/*     */   }
/*     */ 
/*     */   public void setTimestamp(int parameterIndex, Timestamp x, Calendar cal) throws SQLException
/*     */   {
/* 425 */     this.m_statement.setTimestamp(parameterIndex, x, cal);
/*     */   }
/*     */ 
/*     */   public void setTimestamp(int parameterIndex, Timestamp x) throws SQLException
/*     */   {
/* 430 */     this.m_statement.setTimestamp(parameterIndex, x);
/*     */   }
/*     */ 
/*     */   public void setUnicodeStream(int parameterIndex, InputStream x, int length) throws SQLException
/*     */   {
/* 435 */     throw new UnsupportedOperationException("setUnicodeStream is deprecated in PreparedStatement and so not supported in this adapter class");
/*     */   }
/*     */ 
/*     */   public void setURL(int parameterIndex, URL x) throws SQLException
/*     */   {
/* 440 */     this.m_statement.setURL(parameterIndex, x);
/*     */   }
/*     */ 
/*     */   public void setAsciiStream(int arg0, InputStream arg1)
/*     */     throws SQLException
/*     */   {
/*     */   }
/*     */ 
/*     */   public void setAsciiStream(int arg0, InputStream arg1, long arg2)
/*     */     throws SQLException
/*     */   {
/*     */   }
/*     */ 
/*     */   public void setBinaryStream(int arg0, InputStream arg1)
/*     */     throws SQLException
/*     */   {
/*     */   }
/*     */ 
/*     */   public void setBinaryStream(int arg0, InputStream arg1, long arg2)
/*     */     throws SQLException
/*     */   {
/*     */   }
/*     */ 
/*     */   public void setBlob(int arg0, InputStream arg1)
/*     */     throws SQLException
/*     */   {
/*     */   }
/*     */ 
/*     */   public void setBlob(int arg0, InputStream arg1, long arg2)
/*     */     throws SQLException
/*     */   {
/*     */   }
/*     */ 
/*     */   public void setCharacterStream(int arg0, Reader arg1)
/*     */     throws SQLException
/*     */   {
/*     */   }
/*     */ 
/*     */   public void setCharacterStream(int arg0, Reader arg1, long arg2)
/*     */     throws SQLException
/*     */   {
/*     */   }
/*     */ 
/*     */   public void setClob(int arg0, Reader arg1)
/*     */     throws SQLException
/*     */   {
/*     */   }
/*     */ 
/*     */   public void setClob(int arg0, Reader arg1, long arg2)
/*     */     throws SQLException
/*     */   {
/*     */   }
/*     */ 
/*     */   public void setNCharacterStream(int arg0, Reader arg1)
/*     */     throws SQLException
/*     */   {
/*     */   }
/*     */ 
/*     */   public void setNCharacterStream(int arg0, Reader arg1, long arg2)
/*     */     throws SQLException
/*     */   {
/*     */   }
/*     */ 
/*     */   public void setNClob(int arg0, NClob arg1)
/*     */     throws SQLException
/*     */   {
/*     */   }
/*     */ 
/*     */   public void setNClob(int arg0, Reader arg1)
/*     */     throws SQLException
/*     */   {
/*     */   }
/*     */ 
/*     */   public void setNClob(int arg0, Reader arg1, long arg2)
/*     */     throws SQLException
/*     */   {
/*     */   }
/*     */ 
/*     */   public void setNString(int arg0, String arg1)
/*     */     throws SQLException
/*     */   {
/*     */   }
/*     */ 
/*     */   public void setRowId(int arg0, RowId arg1)
/*     */     throws SQLException
/*     */   {
/*     */   }
/*     */ 
/*     */   public void setSQLXML(int arg0, SQLXML arg1)
/*     */     throws SQLException
/*     */   {
/*     */   }
/*     */ 
/*     */   public boolean isClosed()
/*     */     throws SQLException
/*     */   {
/* 540 */     return false;
/*     */   }
/*     */ 
/*     */   public boolean isPoolable() throws SQLException
/*     */   {
/* 545 */     return false;
/*     */   }
/*     */ 
/*     */   public void setPoolable(boolean arg0)
/*     */     throws SQLException
/*     */   {
/*     */   }
/*     */ 
/*     */   public boolean isWrapperFor(Class arg0) throws SQLException
/*     */   {
/* 555 */     return false;
/*     */   }
/*     */ 
/*     */   public Object unwrap(Class arg0) throws SQLException
/*     */   {
/* 560 */     return null;
/*     */   }
/*     */ }

/* Location:           C:\Users\mamatha\Desktop\com.zip
 * Qualified Name:     com.bright.framework.database.bean.AdaptedStatement
 * JD-Core Version:    0.6.0
 */